给你一个满足下述两条属性的 m x n 整数矩阵：

每行中的整数从左到右按非严格递增顺序排列。
每行的第一个整数大于前一行的最后一个整数。
给你一个整数 target ，如果 target 在矩阵中，返回 true ；否则，返回 false 。

 

示例 1：


输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
输出：true
示例 2：


输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
输出：false
 

提示：

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

//基本算法，但是不能全部通过
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        if(matrix[0][0]==target||matrix[m-1][n-1]==target) return true;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                int mid1=(i+m)/2,mid2=(j+n)/2;
                if(matrix[mid1][mid2]==target) return true;
                if(matrix[mid1][mid2]>target)
                {
                    m=mid1;n=mid2;
                }
                else
                {
                    i=mid1;j=mid2;
                }
            }
        }
        return false;
    }
};


//优化算法
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int l=0,r=m*n-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            int row=mid/n;//对应行的下标
            int col=mid%n;//对应列的下标
            if(matrix[row][col]==target)return true;
            if(matrix[row][col]>target)
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        return false;
    }
};





源代码具体问题

mid1 和 mid2 的计算错误：
在双重循环里，mid1 = (i + m) / 2 和 mid2 = (j + n) / 2 的计算方式有误。这里的 i、j 是当前循环的索引，m、n 是矩阵的行数和列数，这样计算得出的 mid1 和 mid2 并不能正确表示矩阵的中间位置。实际上，应该采用二分查找的思路，在整个矩阵中进行查找，而不是在每次循环时都去计算中间位置。
m 和 n 的更新错误：
当 matrix[mid1][mid2] > target 时，把 m 更新为 mid1，n 更新为 mid2；当 matrix[mid1][mid2] < target 时，把 i 更新为 mid1，j 更新为 mid2。这种更新方式会破坏矩阵的查找范围，导致无法正确找到目标值。
双重循环使用不当：
代码使用双重循环遍历矩阵，然而结合 mid1 和 mid2 的计算以及 m、n 的更新，使得查找逻辑变得混乱，没有正确运用二分查找的思想。
修正思路
可以把二维矩阵看作一个一维的有序数组，然后使用二分查找来解决这个问题。具体步骤如下：
算出矩阵的行数 m 和列数 n。
确定二分查找的左右边界，左边界 left = 0，右边界 right = m * n - 1。
在 left <= right 的条件下进行二分查找：
计算中间位置 mid。
把一维的 mid 转换为二维矩阵的坐标 (row, col)，其中 row = mid / n，col = mid % n。
比较 matrix[row][col] 和 target 的大小：
若相等，返回 true。
若 matrix[row][col] > target，更新 right = mid - 1。
若 matrix[row][col] < target，更新 left = mid + 1。
若循环结束后仍未找到目标值，返回 false。


通过上述修正，代码能够正确地在二维矩阵中查找目标值。
#include <vector> class Solution {
public: 
bool searchMatrix(std::vector<std::vector<int>>& matrix, int target) 
{
  int m = matrix.size(); 
  if (m == 0) return false; int n = matrix[0].size(); 
  if (n == 0) return false; int left = 0, right = m * n - 1;
  while (left <= right) 
  {
  int mid = left + (right - left) / 2;//这里算的是中点值的下标
  int row = mid / n; int col = mid % n;
   if (matrix[row][col] == target) 
   {
   return true;
   } 
   else if (matrix[row][col] > target) 
   { 
   right = mid - 1;
   }
   else
   {
   left = mid + 1;
   }
 } 
  return false; 
 }
};

int mid = left + (right - left) / 2; int row = mid / n; int col = mid % n;
这里用mid为什么能计算出行与列
在这个二维矩阵的二分查找算法里，之所以能用 mid 计算出行和列，是因为我们把二维矩阵按行优先的顺序看作一个一维的有序数组。下面为你详细解释其原理和计算过程。
原理分析
对于一个 m 行 n 列的二维矩阵 matrix，可以把它按行优先的顺序展开成一个长度为 m * n 的一维数组。例如，对于一个 2 行 3 列的矩阵：
plaintext
[
  [1, 2, 3],
  [4, 5, 6]
]
按行优先展开后得到一维数组 [1, 2, 3, 4, 5, 6]。
计算过程
1. 确定 mid
在二分查找中，mid 是一维数组的中间位置索引，它的取值范围是 [0, m * n - 1]。通过 int mid = left + (right - left) / 2; 计算得到。
2. 计算行号 row
行号 row 可以通过 mid 除以列数 n 得到，即 int row = mid / n;。这是因为在按行优先展开的一维数组中，每 n 个元素为一行。例如，对于上述 2 行 3 列的矩阵，当 mid = 4 时，row = 4 / 3 = 1，这表示第 1 行（索引从 0 开始）。
3. 计算列号 col
列号 col 可以通过 mid 对列数 n 取模得到，即 int col = mid % n;。这是因为在每一行中，元素的列索引是从 0 到 n - 1 循环的。例如，对于上述 2 行 3 列的矩阵，当 mid = 4 时，col = 4 % 3 = 1，这表示第 1 列（索引从 0 开始）。



代码解释
在这个示例中，我们手动设置 mid = 4，然后计算出对应的行号 row 和列号 col，最后输出该位置的元素。运行代码后，你会发现 row = 1，col = 1，对应的元素是 5，这与矩阵中第 1 行第 1 列的元素一致。
综上所述，通过 mid / n 和 mid % n 可以将一维数组的索引 mid 正确地转换为二维矩阵的行号和列号。
