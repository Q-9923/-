保护模式最“大”的特点就是寻址空间“大”，在进入保护模式之后，我们将接触到虚拟内存、内存 

管理等。

操作系统需要管理硬件，自然就要找到自己有哪些硬件以及信息。操作系统获得内存容量的办法通常在实模式下调用BIOS中断获取，然后存在内存中，进入保护模式后使用这些信息（保护模式下不能使用BIOS中断

### Linux获取内存方法

在 Linux 中有**多种方法获取内存容量**，如果一种方法失败，就会试用其他方法。比如在 Linux 2.6 内核 

中，是用 **detect_memory 函数通过调用 BIOS 中断 0x15 的三个子功能实现的**，子功能号要存放到寄存器 EAX 或 AX 中，如下。 

BIOS 0x15 中断要调用具体的功能，需要在**寄存器 ax 中指定**。其中 0xE8xx 系列的子功能较为强大，0x15 中断的子功能 0xE820和 0xE801 都可以用来获取内存。

y  EAX=0xE820：**遍历主机上全部内存。** ( **返回内存布局，信息量多，操作复杂**)

y  AX=0xE801： **分别检测低 15MB 和 16MB～4GB 的内存，最大支持 4GB。 (直接返回内存容量，操作适中)**

y  AH=0x88：最**多检测出 64MB 内存**，实际内存超过此容量也按照 64MB 返回。 (**最简单但功能薄弱。**）

**BIOS 中断是实模式下的方法，只能在进入保护模式前调用**。咱们在实模式下也用这三种方法检测完内存容量后再进入保护模式。

**若三种方法都失败了，由于无法获取内存信息，后续程序无法加载，只好将机器挂起，停止运行**。 

BIOS 中断可以返回已安装的硬件信息，由于 **BIOS 及其中断也只是一组软件**，它要访问硬件也要依 

靠硬件提供的**接口**，所以，获取内存信息，其内部是通过**连续调用硬件的应用程序接口**（Application Program  

Interface，**API**）来获取内存信息的。由于每次调用 BIOS 中断都有代价的（**比如至少要将** **程序的上下文保护起来以便从中断返回时可以回到原点继续向下执行**），所以尽量在一次中断中返回足量的信息

### P181代码解释

**1、功能**：**获取内存容量 **        2、**原理：实模式调用BIOS中断获取内存，信息存在内存中**

**3、逻辑 ** ：**调用BIOS中断0x15子功能0xe820获取，不成功就0xe801，0x88**

**4、怎么写代码：在第四章loader.s基础之上（进入保护模式前）加获取内存代码**

A、按BIOS中断返回类型的数据结构开辟内存空间获取信息



B、中断用法（P178），**每次BIOS中断只返回一种类型的信息**直到所有内存返回完毕，由于系统内存各部分的类型属性不同， BIOS 就以迭代式查询按照类型属性来划分这片系统内存。内存信息的内容是用地址范围描述符来描述的，用于存储这种描述符的结构称之为**地址范围描述符**



loader.S代码部分（加粗为在loader4.S之上此次新加内容）



%include"boot.inc"
section loader vstart=LOADER_BASE_ADDR
LOADER_STACK_TOP equ LOADER_BASE_ADDR
    jmp loader_start                                ;loader一进来是一对GDT段描述符数据，无法执行所以要跳过


GDT_BASE:                                           ;构建GDT及其内部的描述符
    dd 0x00000000
    dd 0x00000000

CODE_DESC:
    dd 0x0000FFFF                                   ;代码段段描述符
    dd DESC_CODE_HIGH4

DATA_STACK_DESC:
    dd 0x0000FFFF                                   ;数据段段描述符
    dd DESC_DATA_HIGH4

VIDEO_DESC:                                         ;显存段描述符
    dd 0x80000007                                   ;limit=(0xbffff-0xb8000)/40=0x7
    dd DESC_VIDEO_HIGH4                             ;此时dp1已经改为0

    GDT_SIZE equ $ - GDT_BASE                       ;这俩行是编译器认的标号不会翻译在二进制代码中
    GDT_LIMIT equ GDT_SIZE - 1
    times 60 dq 0                                   ;此处预留60个描述符的空间
    SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0   ;相当于(CODE_DESC - GDT_BASE)/8+TI_GDT+RPL0
    SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0   ;同上
    SELECTOR_VIDEO equ (0x0002<<3) + TI_GDT + RPL0  ;同上

**total_mem_bytes dd 0				                    ; total_mem_bytes用于保存内存容量,以字节为单位,此位置比较好记。**
                                                        **; 当前偏移loader.bin文件头0x200字节,loader.bin的加载地址是0x900,**
                                                        **; 故total_mem_bytes内存中的地址是0xb00.将来在内核中咱们会引用此地址**	

**ards_ptr dw GDT_LIMIT                                   ;定义加载进入GDTR的数据，前俩字节是gdt界限，后4字节是gdt起始地址**
        **dd     GDT_BASE**

**ards_buf times 244 db 0                                 ;中断返回的结构体，人工对齐total_mem_bytes4字节+gdt_ptr6字节+ards_buf244字节+ards_nr2,共256字节**
**ards_nr dw 0		                                    ;用于记录ards结构体数量**

**loader_start:**
                                                        **;-------  int 15h eax = 0000E820h ,edx = 534D4150h ('SMAP') 获取内存布局  -------**

    xor ebx, ebx		                                ;第一次调用时，ebx值要为0 用疑惑操作置为零
    mov edx, 0x534d4150	                                ;edx只赋值一次，循环体中不会改变
    mov di, ards_buf	                                ;ards结构缓冲区 
    .e820_mem_get_loop:	                                ;循环获取每个ARDS内存范围描述结构
    mov eax, 0x0000e820	                                ;执行int 0x15后,eax值变为0x534d4150,所以每次执行int前都要更新为子功能号。
    mov ecx, 20		                                    ;ARDS地址范围描述符结构大小是20字节
    int 0x15
    add di, cx		                                    ;使di增加20字节指向缓冲区中新的ARDS结构位置
    inc word [ards_nr]	                                ;记录ARDS数量
    cmp ebx, 0		                                    ;若ebx为0且cf不为1,这说明ards全部返回，当前已是最后一个
    jnz .e820_mem_get_loop
    
                                                        ;在所有ards结构中，找出(base_add_low + length_low)的最大值，即内存的容量。
    mov cx, [ards_nr]	                                ;遍历每一个ARDS结构体,循环次数是ARDS的数量
    mov ebx, ards_buf 
    xor edx, edx		                                ;edx为最大的内存容量,在此先清0
**.find_max_mem_area:	                                    ;无须判断type是否为1,最大的内存块一定是可被使用**
    **mov eax, [ebx]	                                    ;base_add_low**
    **add eax, [ebx+8]	                                ;length_low**
    **add ebx, 20		                                    ;指向缓冲区中下一个ARDS结构**
    **cmp edx, eax		                                ;冒泡排序，找出最大,edx寄存器始终是最大的内存容量**
    **jge .next_ards**
    **mov edx, eax		                                ;edx为总内存大小**
**.next_ards:**
    loop .find_max_mem_area

    mov [total_mem_bytes], edx	                        ;将内存换为byte单位后存入total_mem_bytes处。


                                                    ;----------准备进入保护模式                                                  
                                                    ;1打开A20
                                                    ;2加载GDT
                                                    ;3将cr0的pe位置1



                                                    ;------------打开A20---------
    in al,0x92
    or al,0000_0010B
    out 0x92,al                           
                                                    ;-------------加载GDT--------------
    lgdt[gdt_ptr]



                                                    ;--------------cr0第0位置1---------
    mov eax,cr0
    or eax,0x00000001
    mov cr0,eax
    
                                                    ;jmp dword SELECTOR_CODE：p_mode_start
    jmp SELECTOR_CODE:p_mode_start                  ;刷新流水线 ，避免分支预测的影响，这种cpu优化策略怕jmp跳转,
                                                    ;这将导致之前做的预测失效从而起到了刷新作用

**.e**rror_hlt:                                         ;出错则挂起**
    hlt**                                                   


[bits 32] 
p_mode_start:
    mov ax,SELECTOR_DATA
    mov ds,ax 
    mov es,ax
    mov ss,ax
    mov esp,LOADER_STACK_TOP
    mov ax,SELECTOR_VIDEO
    mov gs,ax

    mov byte [gs:160],'p'
    
    jmp $  




-------------------------------mbr5.S-----------------------------------

![1743602295878](C:\Users\nihao\AppData\Roaming\Typora\typora-user-images\1743602295878.png)

在如图位置加入一行即可

 **jmp LOADER_BASE_ADDR + 0x300            ;跳转位置 + 0x300，使之能跳转至loader.S中的loader_s**



##### 当前阶段命令：

编译mbr：nasm -o /home/qiji-9923/bochs/mbr /home/qiji-9923/bochs/chapter_5/mbr5.S -I /home/qiji-9923/bochs/chapter_5/include/

写入mbr:   dd if=/home/qiji-9923/bochs/mbr of=/home/qiji-9923/bochs/hd60M.img bs=512 count=1 conv=notrunc

编译loader:     nasm -o /home/qiji-9923/bochs/loader /home/qiji-9923/bochs/chapter_5/loader5.S -I /home/qiji-9923/bochs/chapter_5/include/

写入loader：dd if=/home/qiji-9923/bochs/loader of=/home/qiji-9923/bochs/hd60M.img bs=512 count=4 conv=notrunc seek=2
执行：
bin/bochs -f bochsrc.disk



![1743681341052](C:\Users\nihao\AppData\Roaming\Typora\typora-user-images\1743681341052.png)

然后按下CTRL +c程序暂停     输入xp 0xb00

其中xp是gdp的一个指令x代表：explain    p代表：print   xp即检查并打印0xb00这个地址的数据

0x02000000  四个字节默认   因为通过vim bochsrc.disk指令进入bochsrc文件上来就是指定了megs：32所以结果正确

![1743681537299](C:\Users\nihao\AppData\Roaming\Typora\typora-user-images\1743681537299.png)

![1743681764816](C:\Users\nihao\AppData\Roaming\Typora\typora-user-images\1743681764816.png)