编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：

每行的元素从左到右升序排列。
每列的元素从上到下升序排列。
 

示例 1：


输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
输出：true
示例 2：


输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
输出：false
 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int i=0,j=matrix[0].size()-1;
        
            while(j>=0&&i<matrix.size())
            {
                if(matrix[i][j]==target)return true;
                else if(matrix[i][j]<target) i++;把他当作一个菱形一样，类似于二叉树
                else j--;
            }
    return false;

    }
};

// class Solution {
// public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int m = matrix.size(), n = matrix[0].size();
//         int i = 0, j = n - 1; // 从右上角开始
//         while (i < m && j >= 0) { // 还有剩余元素
//             if (matrix[i][j] == target) {
//                 return true; // 找到 target
//             }
//             if (matrix[i][j] < target) {
//                 i++; // 这一行剩余元素全部小于 target，排除
//             } else {
//                 j--; // 这一列剩余元素全部大于 target，排除
//             }
//         }
//         return false;
//     }
// };

都是通过从右上角元素开始 进行比对
