小明是一名勇敢的冒险家，他在一次探险途中发现了一组神秘的宝石，这些宝石的价值都不同。但是，他发现这些宝石会随着时间的推移逐渐失去价值，因此他必须在规定的次数内对它们进行处理。

小明想要最大化这些宝石的总价值。他有两种处理方式：

选出两个最小的宝石，并将它们从宝石组中删除。
选出最大的宝石，并将其从宝石组中删除。
现在，给你小明手上的宝石组，请你告诉他在规定的次数内，最大化宝石的总价值是多少。

输入格式
第一行包含一个整数 
�
t，表示数据组数。

对于每组数据，第一行包含两个整数 
�
n 和 
�
k，表示宝石的数量和规定的处理次数。

第二行包含 
�
n 个整数 
�
1
,
�
2
,
.
.
.
,
�
�
a 
1
​
 ,a 
2
​
 ,...,a 
n
​
 ，表示每个宝石的价值。

输出格式
对于每组数据，输出一个整数，表示在规定的次数内，最大化宝石的总价值。

样例输入
6
5 1
2 5 1 10 6
5 2
2 5 1 10 6
3 1
1 2 3
6 1
15 22 12 10 13 11
6 2
15 22 12 10 13 11
5 1
999999996 999999999 999999997 999999998 999999995
copy
样例输出
21
11
3
62
46
3999999986






#include <bits/stdc++.h>
using namespace std;
using ll=long long;
int main()
{

  int t;cin>>t;
  for(int i=0;i<t;i++)
  {
    ll n,k;cin>>n>>k;
    vector<int>arr(n+1);
    vector<int>dp(n+1,0);
    //vector<int>ans(n+1);
    int ans=0;
    for(int j=0;j<n;j++)
    {
      cin>>arr[j];
    }
    sort(arr.begin(),arr.end());//直接排序后使用
    for(int j=0;j<n;j++)
    {
      dp[j+1]=dp[j]+arr[j];
    }
    if(k==1)
    {
      if(arr[0]+arr[1]<arr[n-1])
      {
        //ans=dp[n]-dp[2];
        cout<<dp[n]-dp[2]<<'\n';
      }
      else
      {
        cout<<dp[n-1]<<endl;
      }
    }
    else
    {
      int ans1=dp[n-2];
      int ans2=dp[n]-dp[4];
      int ans3=dp[n-1]-dp[2];
      cout<<max(ans1,max(ans2,ans3))<<endl;
    }
  }
  return 0;
}
