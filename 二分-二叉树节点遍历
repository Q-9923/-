完全二叉树 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层（从第 0 层开始），则该层包含 1~ 2h 个节点。
示例 1：
输入：root = [1,2,3,4,5,6]
输出：6
示例 2：

输入：root = []
输出：0
示例 3：

输入：root = [1]
输出：1
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int treedeep(TreeNode*root)
    {
        int deep=0;
        while(root)
        {
            root=root->left;deep++;
        }
        return deep;
    }
    int countNodes(TreeNode* root) {
        if(root==nullptr)return 0;
       int left_deep=treedeep(root->left);
       int right_deep=treedeep(root->right);
       if(left_deep==right_deep)
       {
        return countNodes(root->right)+(1<<left_deep);
       }
       else
       {
        return countNodes(root->left)+(1<<right_deep);
       }
        // return countNodes(root->left)+countNodes(root->right)+1;
    }
};

#### 4.完全二叉树的重要性质

如果左子树的深度等于右子树深度，那么左子树一定是满数，节点个数可以通过位运算（1<<l_deep）

如果左子树深度不等于右子树，那么右子树是满树右节点个数为（1<<right_deep），且深度少一
