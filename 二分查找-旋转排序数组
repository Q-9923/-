33.搜索旋转排序数组
整数数组 nums 按升序排列，数组中的值 互不相同 。

在传递给函数之前，nums 在预先未知的某个下标 k（0 <= k < nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。

给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。

 

示例 1：

输入：nums = [4,5,6,7,0,1,2], target = 0
输出：4
示例 2：

输入：nums = [4,5,6,7,0,1,2], target = 3
输出：-1
示例 3：

输入：nums = [1], target = 0
输出：-1


class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        if(n==0)return -1;
        if(n==1)
        {
           return  nums[0]==target?0:-1;
        }
        int l=0,r=n-1;
        while(r>=l)
        {
            int mid=(l+r)/2;
            if(nums[mid]==target)return mid;
            if(nums[0]<=nums[mid])//说明旋转点在右边，左边有序
            {
                if(nums[mid]>target&&target>=nums[0])//用于判断，target在哪一个区间内
                {
                    r=mid-1;
                }
                else
                {
                    l=mid+1;
                }
            }
            else//说明旋转点在左边，右边有序
            {
                if(nums[mid]<=target&&nums[n-1]>target)
                {
                    l=mid+1;
                }
                else
                {
                    r=mid-1;
                }
            }
        }
        return -1;
    }
};

///判断target在哪一边的区间内，并且判断左右区间的有序性，优先判断有序区间，，就可以根据目标值与该有序区间边界元素的大小关系，高效地缩小查找范围。
例如，若判断出左半部分 [0, mid] 有序，且判断出有序区间后，能为后续查找提供明确的方向。当知道某一部分是有序的，就可以依据有序数组的单调性来判断目标值是否可能存在于该区间。







优化代码
class Solution {
    public :
    int search(vector<int>&nums, int target) {
        int min = 0, n = nums.size();
        for (int l = 1, r = n - 1; l <= r;) {
            int m = (l + r) / 2;
            if (nums[0] < nums[m]) l = m + 1;
            else { r = m - 1; min = m; }
        }
        for (int l = min, r = l + n - 1; l <= r;) {
            int m = (l + r) / 2, i = m % n;
            if (target < nums[i]) r = m - 1;
            else if (target > nums[i]) l = m + 1;
            else return i;
        }
        return -1;
    }
};
