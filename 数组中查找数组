输入 
�
n 个不超过 
10
9
10 
9
  的单调不减的（就是后面的数字不小于前面的数字）非负整数 
�
1
,
�
2
,
…
,
�
�
a 
1
​
 ,a 
2
​
 ,…,a 
n
​
 ，然后进行 
�
m 次询问。对于每次询问，给出一个整数 
�
q，要求输出这个数字在序列中第一次出现的编号，如果没有找到的话输出 
−
1
−1 。

Input
第一行 
2
2 个整数 
�
n 和 
�
m，表示数字个数和询问次数。

第二行 
�
n 个整数，表示这些待查询的数字。

第三行 
�
m 个整数，表示询问这些数字的编号，从 
1
1 开始编号。

Output
输出一行，
�
m 个整数，以空格隔开，表示答案。

Sample 1
Inputcopy	Outputcopy
11 3
1 3 3 3 5 7 9 11 13 15 15
1 3 6
1 2 -1 
Hint
数据保证，
1
≤
�
≤
10
6
1≤n≤10 
6
 ，
0
≤
�
�
,
�
≤
10
9
0≤a 
i
​
 ,q≤10 
9
 ，
1
≤
�
≤
10
5
1≤m≤10 
5
 

本题输入输出量较大，请使用较快的 IO 方式。


#include<stdc++.h>
using namespace std;
int main()
{
	int n,m;cin>>n>>m;
	vector<int>arr(n);
	vector<int>arr2(m);
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	for(int i=0;i<m;i++)
	{
		cin>>arr2[i];
	}
	for(int i=0;i<m;i++)
	{
		vector<int>::iterator a=find(arr.begin(),arr.end(),arr2[i]);//如果这里用不了auto关键字就直接自定一个迭代器vector<int>::iterator   注意俩个分号不要丢
		if(a!=arr.end())
		{
			cout<<a-arr.begin()+1<<' ';	
		}
		else cout<<-1<<' ';
		
	}
	
}



//知识点----------------------（find 查找函数，返回值是一个迭代器）
优化使用二分查找
// 二分查找函数，查找目标值第一次出现的位置
int binarySearch(const std::vector<int>& arr, int target) {
    int left = 0, right = arr.size() - 1;
    int result = -1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target) {
            result = mid;
            right = mid - 1; // 继续向左查找，以找到第一次出现的位置
        } else if (arr[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return result == -1 ? -1 : result + 1; // 题目编号从 1 开始
}
