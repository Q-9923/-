给定一个整数数组  nums，处理以下类型的多个查询:

计算索引 left 和 right （包含 left 和 right）之间的 nums 元素的 和 ，其中 left <= right
实现 NumArray 类：

NumArray(int[] nums) 使用数组 nums 初始化对象
int sumRange(int i, int j) 返回数组 nums 中索引 left 和 right 之间的元素的 总和 ，包含 left 和 right 两点（也就是 nums[left] + nums[left + 1] + ... + nums[right] )
 

示例 1：

输入：
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
输出：
[null, 1, -1, -3]

解释：
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))

class NumArray {
public:
        vector<int>arr;

    NumArray(vector<int>& nums) {
        int length=nums.size();
        arr.resize(length+1);
        arr[0]=0;//这里是0而不是nums[0]  因为前0个元素的和是0
        for(int i=0;i<length;i++)
        {
            arr[i+1]=nums[i]+arr[i];//i从0开始，如果是减法-可能越界 arr+1才访问的是arr及其以前的元素
        }
    }
    
    int sumRange(int left, int right) {
        return arr[right+1]-arr[left];//arr+1才访问的是arr及其以前的元素
    }
};
